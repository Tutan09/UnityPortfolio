#pragma kernel SphereKernel
#pragma kernel SphereToParaboloidKernel
#pragma kernel SphereToKleinBottleKernel

#pragma kernel ParaboloidToSphereKernel
#pragma kernel ParaboloidKernel
#pragma kernel ParaboloidToKleinBottleKernel

#pragma kernel KleinBottleToSphereKernel
#pragma kernel KleinBottleToParaboloidKernel
#pragma kernel KleinBottleKernel


RWStructuredBuffer<float3> _Positions;
uint _Resolution;
float _Step, _Time, _TransitionProgres;

#define PI 3.1415920653589793203846
float3 Sphere(float u, float v, float t)
{
	float r = 0.9 + 0.1 * sin(PI * (9.0 * u + 6.0 * v + t));
	float s = r * cos(0.5 * PI * v);

	float3 p;
	p.x = s * sin(PI * u);
	p.y = r * sin(0.5 * PI * v);
	p.z = s * cos(PI * u);
	return p;
}
float3 Paraboloid(float u, float v, float t)
{
	float r = 1;
	float s = r * (v + 1.0) * (v + 1.0) * 0.35 + 0.1 * sin(PI * (9.0 * u + 6.0 * v + t));

	float3 p;
	p.x = s * cos(PI * u);
	p.y = r * v;
	p.z = s * sin(PI * u);
	return p;
}
float3 KleinBottle(float u, float v, float t)
{
	u = u * PI;
	v = v * PI;
	float r =3;
	float s = r + cos(v / 2.0) * sin(u) - sin(v / 2.0) * sin(2.0 * u);

	float3 p;
	p.x = s * cos(v + 2 * t);
	p.y = (sin(v / 2.0) * sin(u) + cos(v / 2.0) * sin(2.0 * u));
	p.z = s * sin(v + 2 *t);
	return p / 3.0;
}


float2 GetUV(uint3 id)
{
	return (id.xy + 0.5) * _Step - 1.0;
}

void SetPosition(uint3 id, float3 position)
{
	if (id.x < _Resolution && id.y < _Resolution)
	{
		_Positions[id.x + id.y * _Resolution] = position;
	}
}

#define KERNEL_FUNCTION(function)							\
	[numthreads(8, 8, 1)]									\
	void function##Kernel (uint3 id: SV_DispatchThreadID) { \
		float2 uv = GetUV(id);								\
		SetPosition(id, function(uv.x, uv.y, _Time));		\
	}

#define KERNEL_MOPH_FUNCTION(functionA, functionB)																\
	[numthreads(8, 8, 1)]																						\
	void functionA##To##functionB##Kernel (uint3 id: SV_DispatchThreadID) {										\
		float2 uv = GetUV(id);																					\
		float3 position = lerp(functionA(uv.x, uv.y, _Time), functionB(uv.x, uv.y, _Time), _TransitionProgres);\
		SetPosition(id, position);																				\
	}


KERNEL_FUNCTION(Sphere);
KERNEL_FUNCTION(Paraboloid);
KERNEL_FUNCTION(KleinBottle);

KERNEL_MOPH_FUNCTION(Sphere, Paraboloid);
KERNEL_MOPH_FUNCTION(Sphere, KleinBottle);

KERNEL_MOPH_FUNCTION(Paraboloid, Sphere);
KERNEL_MOPH_FUNCTION(Paraboloid, KleinBottle);

KERNEL_MOPH_FUNCTION(KleinBottle, Sphere);
KERNEL_MOPH_FUNCTION(KleinBottle, Paraboloid);





